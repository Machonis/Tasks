<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<title>ДЗ №5 'Math Functions'</title>
</head>
<body>
<pre>
<?php 
ini_set('default_charset','utf-8');
ini_set("display_errors", "1");
error_reporting(E_ALL);
/*Работа с %
1. Даны переменные $a = 10 и $b = 3. Найдите остаток от деления $a на $b.*/
$a = 10;
$b = 31;
echo $a % $b;

/*2. Даны переменные $a и $b. Проверьте, что $a делится без остатка на $b. Если это так — выведите 'Делится' и результат деления, иначе выведите 'Делится с остатком' и остаток от деления.*/
$a = 15;
$b = 6;
$c = $a % $b;
	if ($c == 0)
	{
		echo 'Делится';
	}
	else 
	{
		echo 'Делится с остатком '.$c;
	}

/*Работа с модулем
3. Даны переменные $a и $b. Найдите найдите модуль разности $a и $b. Проверьте работу скрипта самостоятельно для различных $a и $b.*/
$a = 20;
$b = 24;
echo abs($a -$b);

/*4. Даны переменные $a и $b. Отнимите от $a переменную $b и результат присвойте переменной $c. Сделайте так, чтобы в любом случае в переменную $c записалось положительное значение. Проверьте работу скрипта при $a и $b, равных соответственно 3 и 5, 6 и 1.*/
$a = 3;
$b = 5;
$c = abs($a - $b);
echo $c;

/*Работа со степенью и корнем
5. Возведите 2 в 10 степень. Результат запишите в переменную $st.*/
$st = pow(2, 10);
	echo $st;

/*6. Найдите квадратный корень из 245.*/
$sqrt = sqrt(245);
echo $sqrt;

/*7. Дан массив с элементами 4, 2, 5, 19, 13, 0, 10. Найдите квадратный корень из суммы квадратов его элементов. Для решения воспользуйтесь циклом foreach.*/
$arr = array(4, 2, 5, 19, 13, 0, 10);
	$i = 0;
	foreach ($arr as $elem)
	{
		$i += $elem**2;
	}
	$result = sqrt($i);
	echo $result;

/*Работа с функциями округления
8. Найдите квадратный корень из 379. Результат округлите до целых, до десятых, до сотых.*/
echo round(sqrt(379));
echo round(sqrt(379), 1);
echo round(sqrt(379), 2);

/*9. Найдите квадратный корень из 587. Округлите результат в большую и меньшую сторону, запишите результаты округления в ассоциативный массив с ключами 'floor' и 'ceil'.*/
$sqrt = sqrt(587);
$ceil = ceil($sqrt);
$floor = floor($sqrt);
$arr = ['floor' => $floor, 'ceil' => $ceil];
var_dump($arr);

/*Работа с min и max
10. Даны числа 4, -2, 5, 19, -130, 0, 10. Найдите минимальное и максимальное число.*/
$arr = array(4, -2, 5, 19, -130, 0, 10);
	echo max($arr); 
	echo "<br/>";
	echo min($arr); 

/*Работа с рандомом
11. Выведите на экран случайное число от 1 до 100.*/
echo rand(1, 100);

/*12. Сделайте так, чтобы каждый раз при обновлении страницы на экран выводилась случайным образом одна из трех картинок.*/
$rand = mt_rand(1, 3);
echo "<img src=\"\" alt=\"$rand\">";

/*13. Заполните массив 10-ю случайными числами. (Подсказка: нужно воспользоваться циклами for или while).*/
$arr = array();
	for ($i = 1; $i <= 10; $i++)
	{
		$arr[] = mt_rand(1, 100);
	}
	var_dump($arr);

/*Общие задачи
14. Напишите скрипт, который будет находить корни квадратного уравнения.*/
$a=1;
$b=1;
$c=-6;
$x1=0;
$x2=0;
$D=0;
$D=$b**2-4*$a*$c;
if ($D>0) {
	if ($D!=0) {
		echo $x1=((-$b)+sqrt($D))/(2*$a);
		echo "<br/>";
		echo $x2=((-$b)-sqrt($D))/(2*$a);
	}
	else echo $x1=(-$b)/(2*$a);
}
else echo 'Корней нет!';

/*15. Напишите скрипт, который   будет находить факториал числа. Факториал — это произведение всех целых чисел, меньше данного. Например, 4! = 1*2*3*4 = 24.*/
$num = 7;
	$result = 1;
	for ($i = 1; $i <= $num; $i++)
	{
		$result *= $i;
	}
	echo $result;

/*16. Напишите скрипт, который проверяет, является ли данное число простым (простое число — это то, которое делится только на 1 и на само себя).*/
$n=997;
$count=0;
for ($i=1; $i < $n ; $i++) { 
	 if ($n%$i==0) $count++; 
}
echo ($count>1) ? 'Не простое' : 'Простое';

/*17. Дан массив $arr. Найдите среднее арифметическое его элементов. Подсказка: количество элементов массива можно подсчитать функцией count. Проверьте задачу на массиве с элементами 12, 15, 20, 25, 59, 79.*/
$arr = array(12, 15, 20, 25, 59, 79);
	$num = 0; 
	foreach ($arr as $elem)
	{
		$num += $elem;
	}
	echo $num / count($arr);

/*18. Напишите скрипт-калькулятор единого налога. Налог считается так: если вы заработали менее, чем ставка $stavka этого налога, умноженная на 30 — то платите ставку. Если же вы заработали более, чем 30*$stavka, то платите не только ставку налога, но и 5% от той суммы, на которую вы превысили 30*$stavka.*/
$zp=1000;
$stavka=20;
$limit=0;
if ($zp>($stavka*30)) {
$limit=($zp-($stavka*30))*0.5;
echo $stavka+$limit;
}
else echo $stavka;

/*19. Напишите скрипт-калькулятор оплаты за электроэнергию. Сумма считается так: если вы потратили за месяц менее 150 киловатт, то сумма считается по одной ставке $summ1 за 1 киловатт, всё, что больше 150 и меньше 300 киловатт считается по ставке $summ2, а все киловатты после 300 — по ставке $summ3.*/
$n=1000;
$result=1;
$summ1=1;
$summ2=2;
$summ3=3;
if ($n<=150) echo $result=$summ1*$n;
elseif ($n>150 && $n<=300) echo $result*=$summ2*$n;
else echo $result*=$summ3*$n;	

/*20. Напишите скрипт, который найдет все простые числа в заданном промежутке. Проверьте его работу на промежутке от 1 до 1000.*/
$n=1000;
$result=0;
function prost($n) { 
	$arr=range(0,$n); 
	$arr[1]=0;
	$result=[];
    for ($i=2; $i <=$n; $i++) { 
   		if ($arr[$i]!=0) {
   			$result[]=$arr[$i];
   				for ($j=$i+$i; $j <=$n ; $j+=$i) { 
   					$arr[$j]=0;	
   				}
   		}
    }
return $result;      
}
$result=prost($n);
print_r($result);

/*21. Напишите скрипт, который будет находить тройки целых чисел, удовлетворяющих теореме Пифагора.*/
$n=100;
$x=1;
$y=1;
$z=1;
$count=1;
$arr[1]=[];
for ($x=1; $x <= $n; $x++) { 
	for ($y=1; $y <= $n; $y++) { 
		$z=sqrt($x**2+$y**2);
		if ((integer)$z==$z)
		{$arr[$count][1]=$x; $arr[$count][2]=$y; $arr[$count][3]=$z; $count++; }
	}
}
print_r($arr);
?>	
<pre/>
</body>
</html>